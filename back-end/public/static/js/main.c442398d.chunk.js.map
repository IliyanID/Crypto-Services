{"version":3,"sources":["Terminal/LoginState/LoginState.tsx","Terminal/LogoutState/LogoutState.tsx","Terminal/DefaultState/defaultState.tsx","Terminal/validTerminalInput/validTerminalInput.tsx","Terminal/Terminal.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["globalProps","validTerminalInput","props","input","substr","defaultString","length","setTerminalInput","LoginState","validTerminalInputProps","onSubmit","loginSubmit","autoComplete","id","onChange","e","target","value","terminalInput","className","spellCheck","addLines","lines","tempLines","map","line","push","setLines","loginCreds","preventDefault","temp","credentials","password","loggedIn","setCredentials","username","defaultTrigger","console","log","loginTrigger","setTerminalStateIndex","setDefaultString","LogoutState","loginoutSubmit","DefaultState","defaultSubmit","newLine","arrayLines","split","filter","el","toLocaleLowerCase","commands","tempDefaultLine","command","logoutTrigger","Terminal","useState","terminalStateIndex","stateProps","terminalState","state","formJSX","style","width","height","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c442398d.chunk.js","sourcesContent":["import React, {FormEvent }  from 'react'\r\nimport {validTerminalInput} from '../validTerminalInput/validTerminalInput';\r\nimport {defaultTrigger} from '../DefaultState/defaultState'\r\nimport {stateInterface} from '../stateInterface/stateInterface'\r\n\r\nlet globalProps:stateInterface;\r\nexport const LoginState = (props:stateInterface):JSX.Element =>{\r\n    globalProps = props;\r\n    let validTerminalInputProps = {\r\n        defaultString:props.defaultString,\r\n        setTerminalInput:props.setTerminalInput\r\n    }\r\n    return <form onSubmit={loginSubmit} autoComplete='off'>\r\n                <input \r\n                    id=\"terminalNewLine\"\r\n                    onChange={(e)=>validTerminalInput(validTerminalInputProps,e.target.value)} \r\n                    value={props.terminalInput} \r\n                    className='terminal_input' \r\n                    spellCheck='false' \r\n                    autoComplete='off'\r\n                />\r\n            </form>\r\n}\r\nconst addLines = (lines:string[]) => {\r\n    let tempLines = [...globalProps.lines]\r\n    lines.map((line)=>{return tempLines.push(line)});\r\n    globalProps.setLines(tempLines);\r\n}\r\n\r\nlet loginCreds = [false,false]\r\nexport const loginSubmit = (e:FormEvent) =>{\r\n    let input = globalProps.terminalInput//.substr(0,globalProps.defaultString.length - 1);\r\n    e.preventDefault();\r\n    globalProps.setTerminalInput(globalProps.defaultString);\r\n    //addLine(newLine);\r\n    if(!loginCreds[0]){\r\n        loginCreds[0] = true;\r\n        console.log(\"Username is: \" + input)\r\n\r\n        let temp = globalProps.credentials\r\n        temp.username = input;\r\n        globalProps.setCredentials(temp)\r\n\r\n        addLines([\"‌‌ \",\"Enter Password\"])\r\n    }\r\n    else if(!loginCreds[1]){\r\n        loginCreds[1] = true;\r\n\r\n        let temp = globalProps.credentials\r\n        temp.password = input;\r\n        temp.loggedIn = true;\r\n        globalProps.setCredentials(temp)\r\n        addLines([\"‌‌ \",\"Login Succesfull Welcome \" + globalProps.credentials.username + \"!\",\"‌‌ \"])\r\n        defaultTrigger()\r\n    }\r\n}\r\nexport const loginTrigger = () =>{\r\n    globalProps.setTerminalStateIndex(1);\r\n    globalProps.setDefaultString(\"\");\r\n\r\n    let tempLines = [...globalProps.lines]\r\n    tempLines.push(globalProps.terminalInput)\r\n\r\n    if(!globalProps.credentials.loggedIn){\r\n        tempLines.push(\"Welcome to User Login Portal\");\r\n        tempLines.push(\"Connecting to server ...\")\r\n        tempLines.push(\"Please Enter Username:\")\r\n        globalProps.setLines(tempLines);\r\n        globalProps.setTerminalInput(\"\");\r\n    }\r\n    else{\r\n        tempLines.push(\"*ERROR* already logged in as \" + globalProps.credentials.username);\r\n        tempLines.push(\"Exiting...\");\r\n        globalProps.setLines(tempLines);\r\n        defaultTrigger();\r\n    }\r\n}\r\nexport default LoginState;","import React, {FormEvent }  from 'react'\r\nimport {validTerminalInput} from '../validTerminalInput/validTerminalInput';\r\nimport {defaultTrigger} from '../DefaultState/defaultState'\r\nimport {loginTrigger} from '../LoginState/LoginState'\r\nimport {stateInterface} from '../stateInterface/stateInterface'\r\n\r\nlet globalProps:stateInterface;\r\nexport const LogoutState = (props:stateInterface):JSX.Element =>{\r\n    globalProps = props;\r\n    let validTerminalInputProps = {\r\n        defaultString:props.defaultString,\r\n        setTerminalInput:props.setTerminalInput\r\n    }\r\n    return <form onSubmit={loginoutSubmit} autoComplete='off'>\r\n                <input \r\n                    id=\"terminalNewLine\"\r\n                    onChange={(e)=>validTerminalInput(validTerminalInputProps,e.target.value)} \r\n                    value={props.terminalInput} \r\n                    className='terminal_input' \r\n                    spellCheck='false' \r\n                    autoComplete='off'\r\n                />\r\n            </form>\r\n}\r\n\r\nexport const loginoutSubmit = (e:FormEvent) =>{\r\n    e.preventDefault();\r\n}\r\nexport const logoutTrigger = () =>{\r\n    globalProps.setTerminalStateIndex(2);\r\n    globalProps.setDefaultString(\"\");\r\n\r\n    let tempLines = [...globalProps.lines]\r\n    tempLines.push(globalProps.terminalInput)\r\n\r\n    if(globalProps.credentials.loggedIn){\r\n        tempLines.push(\"Welcome to User Login Portal\");\r\n        tempLines.push(\"Connecting to server ...\")\r\n        tempLines.push(\"Logging User Out\")\r\n        globalProps.setLines(tempLines);\r\n        globalProps.setTerminalInput(\"\");\r\n\r\n        let temp = globalProps.credentials;\r\n        temp.username = \"guest\";\r\n        temp.password = \"\"\r\n        temp.loggedIn = false;\r\n        globalProps.setCredentials(temp);\r\n        defaultTrigger();\r\n    }\r\n    else{\r\n        tempLines.push(\"*ERROR* user is not logged in \");\r\n        tempLines.push(\"Entering Login Portal\");\r\n        globalProps.setLines(tempLines);\r\n        loginTrigger()\r\n    }\r\n    \r\n}\r\nexport default LogoutState;","import React, {FormEvent }  from 'react'\r\nimport {validTerminalInput} from '../validTerminalInput/validTerminalInput';\r\nimport {loginTrigger} from '../LoginState/LoginState'\r\nimport {logoutTrigger} from '../LogoutState/LogoutState'\r\nimport {stateInterface} from '../stateInterface/stateInterface'\r\n\r\nlet globalProps:stateInterface;\r\nexport const DefaultState = (props:stateInterface):JSX.Element =>{\r\n    globalProps = props;\r\n    let validTerminalInputProps = {\r\n        defaultString:props.defaultString,\r\n        setTerminalInput:props.setTerminalInput\r\n    }\r\n    return <form onSubmit={defaultSubmit} autoComplete='off'>\r\n                <input \r\n                    id=\"terminalNewLine\"\r\n                    onChange={(e)=>validTerminalInput(validTerminalInputProps,e.target.value)} \r\n                    value={props.terminalInput} \r\n                    className='terminal_input' \r\n                    spellCheck='false' \r\n                    autoComplete='off'\r\n                />\r\n            </form>\r\n}\r\nexport const defaultSubmit = (e:FormEvent) =>{\r\n    let newLine = globalProps.terminalInput;\r\n    e.preventDefault();\r\n    globalProps.setTerminalInput(globalProps.defaultString);\r\n    \r\n    let tempLines = [...globalProps.lines]\r\n    tempLines.push(newLine);\r\n    globalProps.setLines(tempLines);\r\n    \r\n    newLine = newLine.substr(globalProps.defaultString.length);\r\n\r\n    //Make array from string => remove empty entries => lowercase all entries\r\n    let arrayLines = newLine.split(\" \").filter((el)=>{return el !==\"\";}).map((el)=>el.toLocaleLowerCase()); \r\n    console.log(newLine);\r\n    \r\n\r\n    commands(arrayLines);\r\n    \r\n\r\n}\r\nexport const defaultTrigger = () =>{\r\n    globalProps.setTerminalStateIndex(0);\r\n\r\n    let tempDefaultLine = globalProps.credentials.username + '@Terminal:~$ ';\r\n    globalProps.setDefaultString(tempDefaultLine);\r\n    globalProps.setTerminalInput(tempDefaultLine);\r\n}\r\nexport const commands = (command:string[]) =>{\r\n    switch(command[0]){\r\n        case \"cls\":\r\n            globalProps.setLines([\"\"])\r\n        break;\r\n        case \"clear\":\r\n            globalProps.setLines([\"\"])\r\n        break;\r\n        case \"user\":\r\n            switch(command[1]){\r\n                case \"login\":\r\n                    console.log(command)\r\n                    loginTrigger()\r\n                break;\r\n\r\n                case \"logout\":\r\n                    console.log(command)\r\n                    logoutTrigger()\r\n                break;\r\n\r\n                case \"register\":\r\n                    console.log(command)\r\n                break;\r\n\r\n                default :\r\n                    console.log(\"Unknown User\");\r\n                break;\r\n                    \r\n            }\r\n        break;\r\n        \r\n        default :\r\n            console.log(\"Unknown Command\");\r\n        break;\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default DefaultState;","import React from 'react'\r\n\r\ninterface props{\r\n    defaultString:string;\r\n    setTerminalInput:React.Dispatch<React.SetStateAction<string>>;\r\n}\r\nexport const validTerminalInput = (props:props,input:string):void =>{\r\n    if(input.substr(0,props.defaultString.length) !== props.defaultString.substr(0,props.defaultString.length)){\r\n        props.setTerminalInput(props.defaultString)\r\n    }\r\n    else\r\n        props.setTerminalInput(input);       \r\n}\r\n\r\nexport default validTerminalInput;\r\n","import React, { useState}  from 'react'\r\nimport {DefaultState} from './DefaultState/defaultState'\r\nimport {LoginState} from './LoginState/LoginState'\r\nimport {LogoutState} from './LogoutState/LogoutState'\r\nimport './Terminal.css'\r\n\r\ninterface Props{\r\n    width: number;\r\n    height: number;\r\n    credentials: {\r\n        username: string;\r\n        password: string;\r\n        loggedIn: boolean;\r\n    };\r\n    setCredentials:React.Dispatch<React.SetStateAction<{\r\n        username: string;\r\n        password: string;\r\n        loggedIn: boolean;\r\n    }>>;\r\n}\r\n\r\nconst Terminal: React.FC<Props> = (props) =>{\r\n    const [lines,setLines] = useState([\"\"]);\r\n    const [defaultString,setDefaultString] = useState(props.credentials.username + '@Terminal:~$ ')\r\n    const [terminalInput,setTerminalInput] = useState(defaultString);\r\n    const [terminalStateIndex,setTerminalStateIndex] = useState(0);\r\n    \r\n    let stateProps = {\r\n        defaultString:defaultString,\r\n        setDefaultString:setDefaultString,\r\n    \r\n        lines:lines,\r\n        setLines:setLines,\r\n    \r\n        terminalInput:terminalInput,\r\n        setTerminalInput:setTerminalInput,\r\n\r\n        setTerminalStateIndex:setTerminalStateIndex,\r\n\r\n        credentials:props.credentials,\r\n        setCredentials:props.setCredentials\r\n    }\r\n    const terminalState = [\r\n        {\r\n           state:\"default\",\r\n           formJSX: DefaultState(stateProps)\r\n        },\r\n        {\r\n            state:\"login\",\r\n            formJSX: LoginState(stateProps)\r\n        },\r\n        {\r\n            state:\"logout\",\r\n            formJSX:LogoutState(stateProps)\r\n        }\r\n    ]\r\n\r\n    return(\r\n        <div \r\n            style={{width:props.width+\"px\", \r\n                    height:props.height+\"px\"}} \r\n            className='Terminal'>\r\n            <div className='terminal_wrapper'>\r\n                {lines.map((line:string,key)=>{\r\n                        return (<p key={key}>{line}</p>)\r\n                    })}\r\n                {terminalState[terminalStateIndex].formJSX}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Terminal;","import React, { useState } from 'react'\nimport Terminal from './Terminal/Terminal'\nimport './App.css';\n\nconst App = () => {\n  const [credentials,setCredentials] = useState({username:\"guest\",password:\"\",loggedIn:false});\n  \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      </header>\n      <div>\n        <p>TeST</p>\n        <Terminal \n          width={500}\n          height={500}\n          credentials={credentials}\n          setCredentials={setCredentials}>\n        </Terminal>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}